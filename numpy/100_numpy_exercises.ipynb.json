{
 "metadata": {
  "name": "100_numpy_exercises"
 },
 "nbformat": 3,
 "nbformat_minor": 0,
 "worksheets": [
  {
   "cells": [
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": "# 100 NumPy Exercises\n\nSebastian Raschka, 2014\n\nMy solutions to the 100 NumPy exercises at http://www.loria.fr/~rougier/teaching/numpy.100/index.html"
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": "## Neophyte"
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": "1) Import the numpy package under the name np  \n2) Print the numpy version."
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "import numpy as np\nprint(np.__version__)",
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "1.8.0\n"
      }
     ],
     "prompt_number": 2
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": "3) Create a null vector of size 10"
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "Z = np.zeros(10)\nprint(Z)",
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "[ 0.  0.  0.  0.  0.  0.  0.  0.  0.  0.]\n"
      }
     ],
     "prompt_number": 8
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": "4) Create a null vector of size 10 but the fifth value which is 1"
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "Z = np.zeros(10)\nZ[4] = 1\nprint(Z)",
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "[ 0.  0.  0.  0.  1.  0.  0.  0.  0.  0.]\n"
      }
     ],
     "prompt_number": 10
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": "5) Create a vector with values ranging from 10 to 99\n"
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "Z = 10 + np.arange(90)\nprint(Z)",
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "[10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34\n 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59\n 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84\n 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99]\n"
      }
     ],
     "prompt_number": 12
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": "6) Create a 3x3 matrix with values ranging from 0 to 8"
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "Z = np.arange(9).reshape(3,3)\nprint(Z)",
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "[[0 1 2]\n [3 4 5]\n [6 7 8]]\n"
      }
     ],
     "prompt_number": 13
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": "7) Find indices of non-zero elements from [1,2,0,0,4,0]"
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "nz = np.nonzero([1,2,0,0,4,0])\nprint(nz)",
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "(array([0, 1, 4]),)\n"
      }
     ],
     "prompt_number": 14
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": "8) Declare a 3x3 identity matrix"
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "Z = np.eye(3)\nprint(Z)",
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "[[ 1.  0.  0.]\n [ 0.  1.  0.]\n [ 0.  0.  1.]]\n"
      }
     ],
     "prompt_number": 15
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": "9) Declare a 5x5 matrix with values 1,2,3,4 just below the diagonal"
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "Z = np.diag(1 + np.arange(4), k= -1)\nprint(Z)",
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "[[0 0 0 0 0]\n [1 0 0 0 0]\n [0 2 0 0 0]\n [0 0 3 0 0]\n [0 0 0 4 0]]\n"
      }
     ],
     "prompt_number": 16
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": "10) Declare a 10x10x10 array with random values"
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "Z = np.random.random((10,10,10))\nprint(Z)",
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "[[[  4.38554026e-01   4.06886643e-01   1.91529535e-01   9.40081922e-01\n     7.32208052e-01   6.83911427e-01   4.33083358e-01   6.91629751e-01\n     1.03660788e-01   7.17906388e-01]\n  [  6.58440574e-01   6.28394692e-01   8.52046139e-01   8.92814970e-01\n     9.23964209e-01   8.30477289e-01   2.69812014e-01   5.31117838e-01\n     8.47567480e-01   1.93453864e-01]\n  [  8.82392671e-01   1.58363801e-01   2.49615975e-01   1.98843058e-01\n     8.40706323e-01   4.58799970e-01   6.81420189e-01   6.34738635e-01\n     1.68802602e-01   3.18760189e-01]\n  [  6.51061025e-01   5.68246577e-01   1.96533764e-01   5.13014099e-01\n     5.71960722e-01   2.32605941e-01   3.58178452e-01   9.22143512e-01\n     3.64424294e-01   9.52902400e-01]\n  [  5.72751017e-01   3.12662457e-01   6.32991901e-01   4.41285075e-02\n     8.45057671e-01   4.30581766e-01   2.32663188e-01   4.15199946e-01\n     2.20540503e-02   3.11053529e-01]\n  [  7.70354470e-01   7.15502767e-01   1.41377535e-01   5.44569196e-01\n     2.49788270e-01   7.89281046e-01   4.16608972e-01   9.29073854e-02\n     8.26067552e-04   6.51969733e-01]\n  [  2.52997414e-01   8.89277583e-01   3.83397908e-01   3.53874939e-01\n     1.99232182e-02   1.83603023e-01   5.20897113e-01   4.85633350e-02\n     3.06908716e-01   9.88091499e-01]\n  [  4.37511169e-01   2.38531966e-01   4.46858010e-01   8.86307634e-01\n     2.84329152e-01   6.14873572e-02   1.27967302e-01   8.25035182e-01\n     8.79582264e-01   8.27604199e-01]\n  [  5.18927660e-01   4.55653821e-01   2.42321984e-02   3.21124974e-03\n     3.05346061e-01   2.27767590e-01   6.44593469e-01   3.31236025e-02\n     4.02567169e-01   9.05079479e-01]\n  [  9.70600527e-01   8.32685816e-01   1.03844036e-01   1.71415156e-01\n     8.58748217e-01   4.43440341e-01   5.47069883e-02   8.30120778e-01\n     4.19781888e-01   6.53401675e-01]]\n\n [[  4.13234938e-01   7.04384916e-01   4.82065805e-01   2.30585485e-01\n     5.73723427e-01   2.26808016e-01   9.25014674e-01   1.33895840e-01\n     9.60885057e-02   7.87587182e-01]\n  [  5.13173754e-02   2.69576942e-02   4.71597583e-01   7.00003046e-02\n     3.92135644e-01   8.88327998e-01   6.13741080e-02   4.43762842e-01\n     7.22929338e-01   1.57743311e-01]\n  [  8.16520960e-01   8.16402970e-01   3.10265258e-01   5.15020135e-01\n     9.13062213e-01   2.56298634e-01   6.42204536e-01   3.92766933e-02\n     3.65071524e-01   1.90293297e-02]\n  [  4.30669994e-01   6.36450353e-01   6.93429236e-01   7.79246504e-01\n     4.57494204e-01   2.34537469e-02   9.60355554e-01   9.88812344e-01\n     8.28595188e-01   7.19240527e-01]\n  [  7.27539021e-02   8.82905850e-01   9.36520968e-01   8.86784663e-01\n     8.45122570e-01   5.85652379e-01   1.32210950e-01   9.38976092e-02\n     6.74876227e-01   4.78102221e-02]\n  [  4.18886740e-01   4.81596795e-01   4.79304972e-01   8.72527581e-01\n     4.44379972e-02   8.24943519e-01   2.10695048e-01   8.87619032e-01\n     1.74380504e-01   5.29640908e-01]\n  [  5.31302218e-01   9.69496321e-01   2.32866304e-01   4.03939631e-01\n     2.47705976e-01   7.87381542e-01   8.48235064e-01   7.08529810e-01\n     8.98778224e-01   4.37390206e-02]\n  [  1.64070420e-01   2.94566067e-01   7.26282866e-01   8.30348960e-01\n     6.17544961e-01   4.09312213e-01   2.31577942e-02   9.12986480e-01\n     4.64498736e-01   6.96263875e-01]\n  [  1.94893458e-01   8.11055018e-01   1.90284526e-01   8.07295104e-01\n     3.20381290e-01   7.65862767e-01   1.06819684e-01   3.32459185e-01\n     1.56045357e-01   3.79234254e-01]\n  [  9.50139852e-01   1.81475022e-01   1.56096322e-01   2.83913929e-01\n     2.96422819e-01   9.46665539e-01   9.86778277e-01   5.22254813e-01\n     5.56649994e-01   5.27778955e-02]]\n\n [[  2.75593647e-01   1.87725632e-01   5.99843605e-01   7.44737448e-01\n     8.43439117e-01   2.63904035e-01   7.71706890e-01   4.07614502e-01\n     8.20624744e-01   7.39987777e-01]\n  [  2.04889120e-01   5.45886089e-02   2.28166137e-01   4.69244359e-01\n     2.45692698e-01   5.08876881e-01   7.57206125e-01   8.97180129e-01\n     9.20174387e-01   2.07144251e-01]\n  [  8.15252164e-01   8.09137148e-01   4.32250257e-02   7.54791239e-01\n     5.14640045e-01   4.87601346e-01   1.47503035e-01   9.58505953e-01\n     8.05542327e-01   4.62233328e-01]\n  [  9.72288802e-01   2.83150807e-01   7.73300771e-01   5.28893690e-01\n     2.77743098e-01   3.53678368e-01   1.16742598e-02   9.04936664e-01\n     5.40521839e-02   5.59475103e-01]\n  [  1.38090119e-01   3.07544936e-01   2.48714816e-01   7.13915634e-01\n     4.93874540e-01   8.87219377e-01   8.11491185e-01   5.49869606e-01\n     2.49866499e-01   6.71120933e-01]\n  [  5.81281780e-01   9.07184663e-01   4.72365519e-02   9.30763922e-01\n     1.84556030e-01   9.32579116e-01   2.76455290e-01   9.39280252e-01\n     7.88295613e-01   5.59136148e-01]\n  [  1.13579059e-01   1.67958076e-01   5.14390559e-03   2.78366351e-01\n     4.28316803e-01   7.08416473e-01   2.88660763e-01   3.11470894e-01\n     1.48147260e-01   9.18148683e-01]\n  [  3.35084278e-01   9.71161359e-01   8.79010151e-01   7.22767479e-01\n     5.50589746e-01   2.35386406e-01   6.24900228e-01   9.93032711e-02\n     8.27605912e-01   9.94022806e-01]\n  [  6.25537448e-01   3.89948147e-01   9.84549029e-02   7.45102665e-01\n     7.23452471e-01   1.64300255e-01   5.20144492e-01   3.43932675e-01\n     6.52158745e-02   5.77704296e-01]\n  [  4.27019807e-01   8.69375157e-01   4.39489200e-01   1.39326558e-01\n     6.02621172e-01   6.49916076e-01   5.26471852e-01   7.24779067e-01\n     2.27970438e-01   2.12099579e-01]]\n\n [[  7.82319860e-01   4.35304898e-01   2.13961754e-01   9.59354218e-01\n     8.29975537e-01   1.06917079e-01   4.98197153e-01   2.92728775e-01\n     1.44124762e-01   1.43560393e-01]\n  [  4.35633318e-01   7.34766693e-01   1.92639881e-01   6.98111458e-01\n     9.91219486e-01   9.87763770e-01   2.71609616e-03   4.55246969e-01\n     7.16068016e-01   3.96967443e-01]\n  [  9.75313468e-01   6.63267408e-04   4.38364066e-01   4.90621247e-01\n     7.10592763e-01   7.50917585e-01   1.28965783e-02   2.57641471e-01\n     5.67209425e-01   4.14123348e-01]\n  [  1.76583365e-01   5.94049818e-01   8.43833481e-01   6.27088551e-01\n     2.02910400e-01   2.11148036e-01   6.20900805e-01   8.74525197e-01\n     8.98759100e-01   7.79863397e-01]\n  [  6.96761269e-01   5.04006173e-01   5.88739797e-01   3.16904265e-01\n     9.13216173e-01   7.46982000e-01   5.23660576e-01   5.01670838e-01\n     7.11350114e-01   8.77103152e-01]\n  [  5.55626077e-01   7.97819834e-01   3.66102799e-03   2.84215013e-01\n     7.46014094e-01   7.07410476e-01   4.57483745e-01   6.15678360e-03\n     1.02137524e-01   1.30061269e-01]\n  [  9.50368111e-01   7.51350023e-01   5.39919322e-02   6.14582070e-01\n     8.51907427e-02   9.32053312e-01   8.81105059e-01   7.33527294e-01\n     6.66745359e-01   8.54529784e-01]\n  [  9.62805154e-01   8.13769624e-01   4.99354203e-01   4.90287735e-01\n     4.30556779e-01   7.10479782e-01   8.75275086e-01   8.57216710e-01\n     2.09908223e-01   6.70583812e-01]\n  [  4.52381914e-01   7.48024004e-01   2.57383668e-01   3.76949308e-01\n     5.93495877e-03   7.47708762e-01   3.21398079e-01   7.35089351e-01\n     8.84465394e-01   9.90567686e-01]\n  [  7.31857470e-01   5.23895842e-01   6.41741423e-01   6.04748895e-01\n     2.07549491e-01   4.12405617e-01   2.25434890e-01   6.00157220e-01\n     4.89738191e-01   2.69913597e-01]]\n\n [[  1.20121146e-01   8.30357495e-03   7.16615977e-01   9.83211426e-01\n     2.45127077e-01   8.47349193e-01   8.65355640e-01   1.02249920e-01\n     7.77531587e-01   3.82199524e-01]\n  [  3.95763881e-01   7.81776065e-02   4.20318823e-01   9.07144196e-01\n     1.19263257e-01   3.22204170e-01   4.14011783e-01   7.00153206e-01\n     6.53647889e-01   8.13483605e-01]\n  [  7.49215085e-01   4.40571661e-01   2.33562416e-02   5.59921639e-01\n     7.24033457e-01   8.23275853e-01   7.79120834e-01   8.80130519e-01\n     5.77910363e-01   5.56458779e-02]\n  [  5.95819151e-01   3.46965773e-01   6.17029582e-01   1.79042171e-01\n     5.72317754e-01   7.48938187e-01   8.13490566e-01   3.21521371e-01\n     8.06981397e-01   3.49256702e-01]\n  [  1.85100217e-01   9.56339916e-02   8.85602884e-02   9.73761795e-01\n     9.66040767e-02   4.87872209e-01   5.57670463e-01   3.57645042e-01\n     4.34319576e-01   6.14896378e-01]\n  [  4.27583648e-01   7.81849756e-01   9.09692899e-01   6.47254211e-01\n     8.62060304e-01   3.54715737e-01   4.29213427e-01   5.02304540e-01\n     9.01370359e-01   7.03250989e-01]\n  [  1.34766469e-01   8.13244941e-01   3.69697561e-01   3.13246676e-01\n     5.16807592e-01   2.71979245e-01   2.82938867e-01   8.46542142e-01\n     1.52203845e-02   8.61211176e-01]\n  [  9.21731163e-01   9.63007989e-01   8.64306322e-02   9.29899253e-01\n     9.14885694e-01   1.02308943e-01   7.40669410e-01   5.58344651e-01\n     1.36929369e-01   9.65758136e-01]\n  [  4.10002944e-01   8.85421246e-02   1.77486063e-01   7.12605049e-01\n     2.56148576e-01   2.12966431e-01   9.86000402e-01   6.71954801e-01\n     8.93064385e-01   5.48255052e-01]\n  [  6.87896981e-01   3.50705113e-01   8.11838352e-01   9.63929885e-01\n     6.19145680e-01   1.33808894e-01   2.61238549e-01   4.24080671e-01\n     2.53219480e-01   2.83863396e-02]]\n\n [[  8.65670109e-01   8.21539183e-01   5.56714729e-01   8.57330340e-01\n     6.21720529e-01   4.86986424e-01   8.74433267e-01   8.94122155e-01\n     4.28309865e-01   6.81152853e-01]\n  [  4.91430086e-01   7.37825172e-01   8.62436631e-01   9.34606267e-01\n     9.23057487e-01   1.42732188e-01   6.76568835e-01   5.47739749e-01\n     4.43297019e-01   6.05320700e-01]\n  [  1.75768496e-01   7.57873603e-01   2.67214185e-01   1.78104651e-02\n     7.77126548e-01   8.62801178e-01   9.93840504e-01   8.20092940e-01\n     9.91445921e-02   7.49188788e-01]\n  [  5.59994389e-01   5.69152576e-01   8.95101111e-01   7.61588127e-01\n     9.44981176e-01   7.00616327e-01   2.31228646e-01   6.13359946e-01\n     2.03479717e-01   7.48452873e-01]\n  [  2.77524357e-01   7.47316782e-01   2.64704246e-01   7.82731446e-01\n     3.02048510e-01   5.94717218e-01   9.76432581e-04   3.30471446e-01\n     3.03926929e-01   3.56838810e-01]\n  [  5.31788943e-01   1.50745433e-01   6.15797867e-01   3.26777148e-01\n     8.87567332e-01   3.15023966e-01   4.13297686e-01   5.76320700e-01\n     5.24846185e-01   7.41713560e-01]\n  [  8.23983461e-01   6.54573914e-01   9.43076116e-01   5.98915072e-02\n     3.88365107e-01   8.07742323e-02   9.34568284e-01   1.45459680e-01\n     9.13337694e-02   1.97335606e-02]\n  [  2.11732802e-02   8.04047933e-01   9.20157009e-01   2.73257951e-01\n     7.30150313e-01   2.08002565e-01   8.71823171e-01   3.33877492e-01\n     6.61060916e-01   6.63265341e-01]\n  [  6.62462389e-01   4.58516685e-02   9.03839470e-01   9.01854522e-01\n     9.56538865e-01   4.98897539e-01   4.81874237e-01   3.63901260e-01\n     4.56270532e-01   1.64699388e-01]\n  [  3.37885492e-01   8.55481128e-01   6.02506147e-01   7.90539928e-01\n     8.22053442e-01   6.01764410e-01   2.58304035e-01   2.47921060e-02\n     1.59780763e-02   4.67528403e-01]]\n\n [[  4.64998532e-01   5.96704199e-01   7.23208234e-01   8.30534994e-02\n     1.26694581e-01   6.00249314e-01   2.69680335e-01   7.72730113e-01\n     9.73492545e-01   8.77088428e-01]\n  [  7.87802386e-01   4.22628788e-01   9.38205450e-02   3.28377472e-01\n     3.16297432e-01   7.37716685e-01   5.54087387e-01   6.66159188e-01\n     5.61911922e-01   9.87086427e-01]\n  [  5.25034481e-01   3.82767304e-01   7.25046408e-01   7.83889073e-02\n     6.10169990e-01   1.71012744e-01   9.68997496e-01   1.64985416e-01\n     3.82122345e-01   8.17512136e-02]\n  [  7.70935472e-01   5.16089665e-01   1.62868254e-01   7.05628827e-01\n     6.50121915e-01   7.87743313e-02   4.42114003e-01   7.72695227e-01\n     7.06131608e-01   5.38337543e-01]\n  [  1.16145553e-01   4.98708082e-01   8.56347547e-01   5.34229663e-01\n     1.85603824e-04   9.12057028e-01   3.82783569e-01   3.87517656e-01\n     6.54739726e-01   5.84158070e-01]\n  [  4.32042560e-02   1.80383255e-01   1.16497568e-01   1.13639776e-01\n     2.57296098e-02   3.40478133e-01   5.14340098e-01   5.60254623e-01\n     1.64256897e-01   4.40589786e-01]\n  [  7.20319769e-01   8.48508788e-01   9.95208491e-01   2.25475086e-01\n     2.91005323e-01   9.91762938e-01   7.62184404e-01   7.79851150e-02\n     2.36565279e-01   1.48862185e-01]\n  [  7.40140185e-01   8.55852250e-01   7.38523281e-01   5.88723961e-01\n     9.20807933e-01   5.16635756e-01   9.97656431e-01   9.75283026e-01\n     6.31172411e-01   4.64034736e-01]\n  [  2.67553486e-01   8.13377178e-01   7.76001834e-01   3.97391176e-01\n     7.89419386e-01   7.05417422e-01   7.66678746e-02   3.81995362e-01\n     4.30072983e-01   7.55240535e-01]\n  [  2.37405012e-01   6.82914552e-01   7.32057739e-02   6.88116101e-01\n     5.04690804e-01   4.57282956e-01   8.48724593e-01   9.26149615e-01\n     4.02349768e-01   4.79587115e-02]]\n\n [[  3.14886232e-01   6.92843391e-01   9.65933108e-01   9.69716230e-01\n     8.05527683e-01   1.91430482e-01   9.14115485e-01   6.93090388e-01\n     5.90625367e-01   5.45387041e-02]\n  [  6.75257319e-01   4.54144009e-01   2.43935841e-02   6.42578875e-01\n     1.21329682e-01   6.84268620e-01   3.37217977e-01   2.28704305e-01\n     7.94734228e-01   5.12729128e-01]\n  [  6.65987992e-01   5.11729849e-01   2.04082573e-01   8.43074966e-01\n     9.10681461e-02   5.58942868e-01   3.35795242e-01   5.26537490e-01\n     6.09805895e-01   8.97106161e-01]\n  [  4.51958559e-01   5.04212519e-02   5.31228330e-01   7.51965781e-01\n     3.58763138e-01   4.71611590e-01   2.63634822e-01   2.62239206e-01\n     5.71919082e-01   3.87162404e-01]\n  [  9.38686705e-01   9.04997217e-02   8.15286495e-01   1.43609050e-01\n     8.77060212e-01   7.83922918e-01   7.13408809e-02   1.00764185e-01\n     2.99736750e-01   8.71099830e-01]\n  [  7.13141323e-02   5.38616933e-01   2.42191856e-02   1.77034783e-01\n     3.49071022e-01   4.44404556e-01   6.06566454e-01   9.59756616e-01\n     1.03669270e-01   4.35109707e-01]\n  [  3.64576948e-01   9.86772958e-01   6.21048554e-01   9.48941230e-01\n     5.54668197e-01   6.38259219e-01   9.28910845e-01   1.76653889e-01\n     5.32642017e-01   7.74718799e-01]\n  [  7.43349179e-01   1.08619540e-01   2.88431041e-01   6.20487388e-01\n     9.14353706e-01   4.91869698e-02   2.17990465e-01   2.83729466e-01\n     9.02106912e-01   5.04903800e-01]\n  [  7.65852388e-03   2.22956091e-01   7.53376107e-02   5.63256865e-01\n     3.05757088e-01   5.33189143e-01   9.99768097e-01   5.42326324e-01\n     7.16162063e-02   6.24826129e-01]\n  [  8.63967052e-01   5.07627324e-01   1.84400091e-01   6.93709382e-01\n     4.16613018e-01   6.37489295e-01   7.67723424e-01   1.62088381e-01\n     2.04948924e-01   5.25750707e-01]]\n\n [[  1.36927071e-01   1.76600887e-02   4.70951053e-01   4.74549360e-01\n     1.32750161e-01   4.83240234e-03   8.43932874e-01   5.01137703e-01\n     2.03187756e-01   8.54269561e-01]\n  [  2.38395197e-02   7.23419313e-01   2.18600858e-01   6.88792019e-01\n     9.92067004e-01   8.04263992e-01   9.11658178e-01   2.18669181e-01\n     8.09530380e-01   1.76906689e-01]\n  [  7.09237753e-01   3.60871246e-01   8.37379954e-01   8.79148301e-01\n     8.02459666e-02   1.86526084e-01   7.33022319e-01   7.99078155e-01\n     1.50774505e-01   4.83885587e-02]\n  [  5.52907775e-01   4.46888643e-01   4.66536916e-01   3.68025504e-02\n     4.29750654e-01   9.98272580e-01   3.64332265e-01   2.74875552e-02\n     9.12390035e-01   9.84069399e-01]\n  [  1.91610517e-01   4.98404463e-01   7.64065311e-01   9.11430231e-01\n     3.65778353e-01   2.05654047e-01   1.33818548e-01   4.47865279e-01\n     2.57451548e-01   6.74362806e-01]\n  [  5.75736508e-02   8.21304872e-01   7.09619837e-01   7.55845380e-01\n     4.85131866e-01   7.47703520e-01   6.58502902e-01   3.41563586e-01\n     3.98272684e-01   8.65678237e-01]\n  [  2.84749876e-01   2.50682966e-01   4.58678065e-01   7.12238121e-01\n     7.47903675e-03   4.75666475e-01   9.46547402e-01   1.25854974e-01\n     6.68302405e-01   2.51698126e-01]\n  [  2.82775501e-01   8.21559917e-01   5.45023376e-01   6.32675194e-01\n     4.18603975e-02   1.31145910e-01   7.68548423e-01   7.48956629e-01\n     2.55018305e-01   2.40020221e-01]\n  [  8.84718369e-01   2.51877085e-01   4.98331397e-01   6.16472372e-01\n     2.70213045e-01   1.40890132e-01   6.65380213e-01   3.93654597e-01\n     9.94299810e-01   7.76761414e-01]\n  [  5.65519915e-01   1.62227373e-01   9.27093589e-01   5.87795221e-02\n     6.54944805e-01   2.43066964e-01   6.77626421e-01   9.79772242e-01\n     8.69243510e-01   7.21768400e-01]]\n\n [[  8.36302149e-01   5.32504600e-01   6.50186880e-01   7.53583672e-03\n     7.61804433e-01   1.87063234e-01   9.47693464e-01   9.62484030e-01\n     9.37542349e-01   4.61931528e-01]\n  [  4.42795179e-01   7.71004063e-01   8.62845238e-01   5.60145419e-01\n     4.07970366e-01   7.13197960e-01   7.61444395e-01   7.34892810e-01\n     2.61099751e-01   3.57462929e-01]\n  [  3.89095442e-01   1.32801824e-02   4.28519466e-01   9.68129838e-01\n     1.42059410e-01   4.72261508e-01   7.68077455e-01   5.38244052e-01\n     4.52883305e-01   5.19901901e-01]\n  [  2.72700541e-01   7.93985118e-01   5.77121548e-01   8.39520325e-01\n     2.72393812e-01   5.51263047e-01   5.86209430e-01   4.77061474e-01\n     8.75888630e-01   1.50866809e-01]\n  [  5.45559911e-01   6.52527494e-01   2.98205310e-01   5.78733261e-01\n     1.15852715e-01   1.76772873e-01   8.25110440e-01   8.29584152e-02\n     5.14197474e-01   3.85063931e-01]\n  [  8.57126364e-01   4.16993008e-01   7.49519396e-01   5.50237917e-01\n     9.08951219e-01   2.40174327e-01   9.09230038e-01   8.76644705e-01\n     3.24815500e-01   4.59853722e-01]\n  [  7.61751283e-01   5.07209794e-01   1.79105377e-01   2.62370145e-01\n     4.77975250e-02   1.46016846e-01   9.21982936e-01   4.55105818e-02\n     9.48551619e-02   3.20236852e-01]\n  [  7.24546215e-01   2.44844450e-01   2.27507079e-01   7.16051416e-01\n     5.84463152e-01   5.97034597e-01   9.84901216e-01   9.29354977e-01\n     4.04488135e-01   8.82483785e-01]\n  [  4.72537732e-01   4.65043492e-01   2.91748249e-02   4.24076085e-01\n     5.77084424e-01   9.37052619e-02   7.82259240e-01   3.98090144e-01\n     6.86259468e-01   8.27957446e-01]\n  [  8.00534253e-02   5.30201054e-01   3.38112823e-01   9.72593259e-01\n     6.08280488e-01   5.69248745e-01   7.89039347e-01   2.93756792e-01\n     5.31658621e-01   6.10026369e-01]]]\n"
      }
     ],
     "prompt_number": 17
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": "## Novice"
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": "11) Declare a 8x8 matrix and fill it with a checkerboard pattern11) "
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "Z = np.zeros((8,8))\nZ[1::2,::2] = 1\nZ[::2,1::2] = 1\nprint(Z)",
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "[[ 0.  1.  0.  1.  0.  1.  0.  1.]\n [ 1.  0.  1.  0.  1.  0.  1.  0.]\n [ 0.  1.  0.  1.  0.  1.  0.  1.]\n [ 1.  0.  1.  0.  1.  0.  1.  0.]\n [ 0.  1.  0.  1.  0.  1.  0.  1.]\n [ 1.  0.  1.  0.  1.  0.  1.  0.]\n [ 0.  1.  0.  1.  0.  1.  0.  1.]\n [ 1.  0.  1.  0.  1.  0.  1.  0.]]\n"
      }
     ],
     "prompt_number": 3
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": "12) Declare a 10x10 array with random values and find the minimum and maximum values"
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "Z = np.random.random((10,10))\nZmin,Zmax = Z.min(),Z.max()\nprint(Zmin, Zmax)",
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "0.020545937169 0.984557963589\n"
      }
     ],
     "prompt_number": 4
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": "13) Create a checkerboard 8x8 matrix using the tile function"
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "Z = np.tile(np.array([[0,1],[1,0]]),(4,4))\nprint(Z)",
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "[[0 1 0 1 0 1 0 1]\n [1 0 1 0 1 0 1 0]\n [0 1 0 1 0 1 0 1]\n [1 0 1 0 1 0 1 0]\n [0 1 0 1 0 1 0 1]\n [1 0 1 0 1 0 1 0]\n [0 1 0 1 0 1 0 1]\n [1 0 1 0 1 0 1 0]]\n"
      }
     ],
     "prompt_number": 5
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": "14) Normalize a 5x5 random matrix (between 0 and 1)"
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "Z = np.random.random((5,5))\nZmax,Zmin = Z.max(),Z.min()\nZ = (Z-Zmin)/(Zmax-Zmin)\nprint(Z)",
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "[[ 0.57132404  1.          0.52483086  0.1169019   0.        ]\n [ 0.73703627  0.76454824  0.47882412  0.88952142  0.41252931]\n [ 0.10998335  0.97108473  0.3660598   0.93773632  0.23539805]\n [ 0.98062233  0.51652976  0.99555132  0.39761294  0.89142468]\n [ 0.76006601  0.9020001   0.09412337  0.28973611  0.89309216]]\n"
      }
     ],
     "prompt_number": 6
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "15) Multiply a 5x3 matrix by a 3x2 matrix (real matrix product)",
     "language": "python",
     "metadata": {},
     "outputs": []
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "Z = np.dot(np.ones((5,3)),np.ones((3,2)))\nprint(Z)",
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "[[ 3.  3.]\n [ 3.  3.]\n [ 3.  3.]\n [ 3.  3.]\n [ 3.  3.]]\n"
      }
     ],
     "prompt_number": 7
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": "16) Create a 10x10 matrix with row values ranging from 0 to 9"
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "Z = np.zeros((10,10))\nZ += np.arange(10)\nprint(Z)",
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "[[ 0.  1.  2.  3.  4.  5.  6.  7.  8.  9.]\n [ 0.  1.  2.  3.  4.  5.  6.  7.  8.  9.]\n [ 0.  1.  2.  3.  4.  5.  6.  7.  8.  9.]\n [ 0.  1.  2.  3.  4.  5.  6.  7.  8.  9.]\n [ 0.  1.  2.  3.  4.  5.  6.  7.  8.  9.]\n [ 0.  1.  2.  3.  4.  5.  6.  7.  8.  9.]\n [ 0.  1.  2.  3.  4.  5.  6.  7.  8.  9.]\n [ 0.  1.  2.  3.  4.  5.  6.  7.  8.  9.]\n [ 0.  1.  2.  3.  4.  5.  6.  7.  8.  9.]\n [ 0.  1.  2.  3.  4.  5.  6.  7.  8.  9.]]\n"
      }
     ],
     "prompt_number": 8
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": "17) Create a vector of size 1000 with values ranging from 0 to 1, both excluded"
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "Z = np.random.linspace(0,1,1002,endpoint=True)[1:-1]\nprint(Z)",
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "ename": "AttributeError",
       "evalue": "'module' object has no attribute 'linspace'",
       "output_type": "pyerr",
       "traceback": [
        "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m\n\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
        "\u001b[0;32m<ipython-input-51-c8e9d3276820>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mZ\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrandom\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlinspace\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m1002\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mendpoint\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mZ\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
        "\u001b[0;31mAttributeError\u001b[0m: 'module' object has no attribute 'linspace'"
       ]
      }
     ],
     "prompt_number": 51
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": "18) Create a random vector of size 100 and sort it"
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "Z = np.random.random(100)\nZ.sort()\nprint(Z)",
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "[ 0.00563466  0.00612129  0.01770808  0.02413417  0.0494581   0.05662321\n  0.05779507  0.05895835  0.0626562   0.06589621  0.07134498  0.07814558\n  0.07863115  0.08193236  0.09406124  0.12679184  0.16272849  0.16683138\n  0.16698228  0.1771875   0.18657518  0.2016586   0.20436528  0.21202373\n  0.21305191  0.21962601  0.23937064  0.24401825  0.24667835  0.24900488\n  0.26042786  0.26924124  0.27716038  0.28546683  0.29024032  0.29958697\n  0.33177704  0.33364444  0.34143268  0.37452166  0.38422787  0.38885491\n  0.41174455  0.42766031  0.43847468  0.43977967  0.44378581  0.45722478\n  0.4727523   0.47972241  0.49510746  0.50368482  0.52292591  0.5383003\n  0.54435048  0.55075968  0.5536626   0.58431403  0.5906776   0.59798792\n  0.59902527  0.61276434  0.63286302  0.63705931  0.65341461  0.65710767\n  0.69140867  0.72486585  0.72682724  0.73844399  0.76217972  0.76998982\n  0.78198507  0.78719353  0.79847026  0.81742633  0.82873255  0.83060067\n  0.85158006  0.85927092  0.86516495  0.86552428  0.87266145  0.88264165\n  0.88753513  0.89280112  0.91074426  0.91283345  0.91401366  0.91740669\n  0.94548425  0.95085882  0.95304148  0.9534079   0.95349721  0.95962347\n  0.96433541  0.98551796  0.99082052  0.99118065]\n"
      }
     ],
     "prompt_number": 12
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": "19) Consider two random matrices A anb B, check if they are equal."
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "A = np.random.randint(0,2,(2,2))\nB = np.random.randint(0,2,(2,2))\nequal = np.allclose(A,B)\nprint(equal)",
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "False\n"
      }
     ],
     "prompt_number": 13
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": "20) Create a random vector of size 1000 and find the mean value"
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "Z = np.random.random(1000)\nm = Z.mean()\nprint(m)",
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "0.496691870843\n"
      }
     ],
     "prompt_number": 14
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": "## Apprentice"
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": "21) Make an array immutable"
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "Z = np.zeros(10)\nZ.flags.writeable = False\nZ[4] = 1",
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "ename": "ValueError",
       "evalue": "assignment destination is read-only",
       "output_type": "pyerr",
       "traceback": [
        "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m\n\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
        "\u001b[0;32m<ipython-input-15-ae39475ac48a>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mZ\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mzeros\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0mZ\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mflags\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwriteable\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mZ\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m4\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
        "\u001b[0;31mValueError\u001b[0m: assignment destination is read-only"
       ]
      }
     ],
     "prompt_number": 15
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": "22) Consider a random 100x2 matrix representing cartesian coordinates, convert them to polar coordinates"
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "Z = np.random.random((100,2))\nX,Y = Z[:,0],Z[:,1]\nR = np.sqrt(X**2+Y**2)\nT = np.arctan2(Y,X)\nprint(T)",
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "[ 0.89663488  1.43835977  1.47769023  0.74705611  0.39303195  0.35337623\n  1.56165895  0.68369698  0.69537116  0.89528443  1.48084343  0.68475463\n  0.67661456  1.31232003  1.47485808  0.85530419  1.38336623  1.03637705\n  0.61514685  0.83853597  0.69560531  0.25993028  1.35088113  1.14560867\n  1.27129637  1.53339798  0.42408918  1.50831378  0.03166072  0.67649462\n  1.0410203   1.50541615  1.45988635  0.84447944  0.53102554  1.08343906\n  1.11176789  0.63991363  0.79267304  0.79287931  0.23348092  0.05556841\n  0.41081759  0.31194296  1.42660646  0.01828059  0.16259968  0.0409751\n  1.03647988  0.9037316   0.39368699  0.62989296  0.46985009  1.246489\n  0.97054295  0.72878118  1.14139892  0.63859477  0.10800531  0.30884595\n  1.2682838   1.36898993  0.96182024  0.20079791  0.45604466  1.54478806\n  0.43265277  1.41039093  0.21912285  1.44864407  0.10732271  1.24284149\n  0.45932422  0.88056911  0.5757204   1.52920463  1.45266514  0.88669707\n  0.04143342  0.1749923   1.22212532  0.60342563  0.05047858  1.52168212\n  0.60884492  0.20410632  1.06222339  1.53610763  0.60968106  0.70217933\n  0.87444208  0.77306842  0.27807311  1.3024857   0.57136495  0.97218559\n  0.88741789  0.78494139  0.09957954  1.29818921]\n"
      }
     ],
     "prompt_number": 16
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": "23) Create random vector of size 100 and replace the maximum value by 0"
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "Z = np.random.random(100)\nZ[Z.argmax()] = 0\nprint(Z)",
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "[ 0.69432438  0.24585808  0.61039528  0.14564756  0.91862474  0.13487523\n  0.86546151  0.35799584  0.02327474  0.36273623  0.76138278  0.35027099\n  0.34395985  0.97795658  0.52265293  0.87773915  0.15893637  0.58285978\n  0.13406182  0.8962014   0.64571251  0.61851588  0.76880178  0.40129029\n  0.40105158  0.          0.09323307  0.37441196  0.63999461  0.0965525\n  0.16802846  0.1498147   0.25780181  0.16809299  0.84329951  0.03444232\n  0.7467059   0.72844082  0.22132788  0.38764163  0.59183451  0.26670862\n  0.67452939  0.46541489  0.92954273  0.9113375   0.87878626  0.67506308\n  0.56569538  0.41146881  0.00657656  0.18702412  0.49198355  0.96789034\n  0.11496137  0.43426054  0.70965815  0.22923348  0.57622372  0.91984889\n  0.70514214  0.45360769  0.74282716  0.38871011  0.02924057  0.61070783\n  0.58668819  0.60188068  0.4183663   0.16657277  0.98113086  0.91891282\n  0.28748211  0.43119295  0.93350762  0.15871953  0.56011709  0.27453138\n  0.28840628  0.62241433  0.17147126  0.31166504  0.78569715  0.85443604\n  0.18701231  0.49643451  0.59291333  0.55377391  0.20604933  0.16121789\n  0.66720577  0.38727626  0.17748072  0.13112099  0.79535682  0.00220611\n  0.88198336  0.23814373  0.43792233  0.51330602]\n"
      }
     ],
     "prompt_number": 17
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": "24) Declare a structured array with x and y coordinates covering the [0,1]x[0,1] area."
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "Z = np.zeros((10,10),[('x',float),('y',float)])\nZ['x'],Z['y'] = np.meshgrid(np.linspace(0,1,10),np.linspace(0,1,10))\nprint(Z)",
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "[[(0.0, 0.0) (0.1111111111111111, 0.0) (0.2222222222222222, 0.0)\n  (0.3333333333333333, 0.0) (0.4444444444444444, 0.0)\n  (0.5555555555555556, 0.0) (0.6666666666666666, 0.0)\n  (0.7777777777777777, 0.0) (0.8888888888888888, 0.0) (1.0, 0.0)]\n [(0.0, 0.1111111111111111) (0.1111111111111111, 0.1111111111111111)\n  (0.2222222222222222, 0.1111111111111111)\n  (0.3333333333333333, 0.1111111111111111)\n  (0.4444444444444444, 0.1111111111111111)\n  (0.5555555555555556, 0.1111111111111111)\n  (0.6666666666666666, 0.1111111111111111)\n  (0.7777777777777777, 0.1111111111111111)\n  (0.8888888888888888, 0.1111111111111111) (1.0, 0.1111111111111111)]\n [(0.0, 0.2222222222222222) (0.1111111111111111, 0.2222222222222222)\n  (0.2222222222222222, 0.2222222222222222)\n  (0.3333333333333333, 0.2222222222222222)\n  (0.4444444444444444, 0.2222222222222222)\n  (0.5555555555555556, 0.2222222222222222)\n  (0.6666666666666666, 0.2222222222222222)\n  (0.7777777777777777, 0.2222222222222222)\n  (0.8888888888888888, 0.2222222222222222) (1.0, 0.2222222222222222)]\n [(0.0, 0.3333333333333333) (0.1111111111111111, 0.3333333333333333)\n  (0.2222222222222222, 0.3333333333333333)\n  (0.3333333333333333, 0.3333333333333333)\n  (0.4444444444444444, 0.3333333333333333)\n  (0.5555555555555556, 0.3333333333333333)\n  (0.6666666666666666, 0.3333333333333333)\n  (0.7777777777777777, 0.3333333333333333)\n  (0.8888888888888888, 0.3333333333333333) (1.0, 0.3333333333333333)]\n [(0.0, 0.4444444444444444) (0.1111111111111111, 0.4444444444444444)\n  (0.2222222222222222, 0.4444444444444444)\n  (0.3333333333333333, 0.4444444444444444)\n  (0.4444444444444444, 0.4444444444444444)\n  (0.5555555555555556, 0.4444444444444444)\n  (0.6666666666666666, 0.4444444444444444)\n  (0.7777777777777777, 0.4444444444444444)\n  (0.8888888888888888, 0.4444444444444444) (1.0, 0.4444444444444444)]\n [(0.0, 0.5555555555555556) (0.1111111111111111, 0.5555555555555556)\n  (0.2222222222222222, 0.5555555555555556)\n  (0.3333333333333333, 0.5555555555555556)\n  (0.4444444444444444, 0.5555555555555556)\n  (0.5555555555555556, 0.5555555555555556)\n  (0.6666666666666666, 0.5555555555555556)\n  (0.7777777777777777, 0.5555555555555556)\n  (0.8888888888888888, 0.5555555555555556) (1.0, 0.5555555555555556)]\n [(0.0, 0.6666666666666666) (0.1111111111111111, 0.6666666666666666)\n  (0.2222222222222222, 0.6666666666666666)\n  (0.3333333333333333, 0.6666666666666666)\n  (0.4444444444444444, 0.6666666666666666)\n  (0.5555555555555556, 0.6666666666666666)\n  (0.6666666666666666, 0.6666666666666666)\n  (0.7777777777777777, 0.6666666666666666)\n  (0.8888888888888888, 0.6666666666666666) (1.0, 0.6666666666666666)]\n [(0.0, 0.7777777777777777) (0.1111111111111111, 0.7777777777777777)\n  (0.2222222222222222, 0.7777777777777777)\n  (0.3333333333333333, 0.7777777777777777)\n  (0.4444444444444444, 0.7777777777777777)\n  (0.5555555555555556, 0.7777777777777777)\n  (0.6666666666666666, 0.7777777777777777)\n  (0.7777777777777777, 0.7777777777777777)\n  (0.8888888888888888, 0.7777777777777777) (1.0, 0.7777777777777777)]\n [(0.0, 0.8888888888888888) (0.1111111111111111, 0.8888888888888888)\n  (0.2222222222222222, 0.8888888888888888)\n  (0.3333333333333333, 0.8888888888888888)\n  (0.4444444444444444, 0.8888888888888888)\n  (0.5555555555555556, 0.8888888888888888)\n  (0.6666666666666666, 0.8888888888888888)\n  (0.7777777777777777, 0.8888888888888888)\n  (0.8888888888888888, 0.8888888888888888) (1.0, 0.8888888888888888)]\n [(0.0, 1.0) (0.1111111111111111, 1.0) (0.2222222222222222, 1.0)\n  (0.3333333333333333, 1.0) (0.4444444444444444, 1.0)\n  (0.5555555555555556, 1.0) (0.6666666666666666, 1.0)\n  (0.7777777777777777, 1.0) (0.8888888888888888, 1.0) (1.0, 1.0)]]\n"
      }
     ],
     "prompt_number": 18
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": "25) Print the minimum and maximum representable value for each numpy scalar type"
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "for dtype in[np.int8,np.int32,np.int64]:\n    print(np.iinfo(dtype).min)\n    print(np.iinfo(dtype).max)\nfor dtype in[np.float32,np.float64]:\n    print(np.finfo(dtype).min)\n    print(np.finfo(dtype).max)\n    print(np.finfo(dtype).eps)",
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "-128\n127\n-2147483648\n2147483647\n-9223372036854775808\n9223372036854775807\n-3.40282e+38\n3.40282e+38\n1.19209e-07\n-1.79769313486e+308"
      },
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "\n1.79769313486e+308\n2.22044604925e-16\n"
      }
     ],
     "prompt_number": 19
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": "26) Create a structured array representing a position (x,y) and a color (r,g,b)"
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "Z = np.zeros(10,[\n                 ('position',[('x',float,1),('y',float,1)]),\n                 ('color',[('r',float,1),('g',float,1),('b',float,1)])\n                ]\n            )\nprint(Z)",
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "[((0.0, 0.0), (0.0, 0.0, 0.0)) ((0.0, 0.0), (0.0, 0.0, 0.0))\n ((0.0, 0.0), (0.0, 0.0, 0.0)) ((0.0, 0.0), (0.0, 0.0, 0.0))\n ((0.0, 0.0), (0.0, 0.0, 0.0)) ((0.0, 0.0), (0.0, 0.0, 0.0))\n ((0.0, 0.0), (0.0, 0.0, 0.0)) ((0.0, 0.0), (0.0, 0.0, 0.0))\n ((0.0, 0.0), (0.0, 0.0, 0.0)) ((0.0, 0.0), (0.0, 0.0, 0.0))]\n"
      }
     ],
     "prompt_number": 20
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": "27) Consider a random vector with shape (100,2) representing coordinates, find point by point distances"
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "Z = np.random.random((10,2))\nX,Y = np.atleast_2d(Z[:,0]), np.atleast_2d(Z[:,1])\nD = np.sqrt((X-X.T)**2+(Y-Y.T)**2)\n# Much faster with scipyZ=np.random.random((10,2))D=scipy.spatial.distance.cdist(Z,Z)\nprint(D)",
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "[[ 0.          0.16182732  0.23460229  0.23693524  0.25160428  0.0442297\n   0.42595811  0.20396819  0.49403828  0.47789028]\n [ 0.16182732  0.          0.28999297  0.3117766   0.41263781  0.15033281\n   0.2646618   0.12694972  0.40838931  0.3552207 ]\n [ 0.23460229  0.28999297  0.          0.46833974  0.31460558  0.19539427\n   0.50671187  0.39873125  0.35803778  0.40680714]\n [ 0.23693524  0.3117766   0.46833974  0.          0.33363164  0.28040265\n   0.51383791  0.23111548  0.71041536  0.66699303]\n [ 0.25160428  0.41263781  0.31460558  0.33363164  0.          0.26685774\n   0.67724699  0.4389678   0.66555836  0.68753287]\n [ 0.0442297   0.15033281  0.19539427  0.28040265  0.26685774  0.\n   0.41358016  0.22009322  0.45206176  0.44159873]\n [ 0.42595811  0.2646618   0.50671187  0.51383791  0.67724699  0.41358016\n   0.          0.28355748  0.41732383  0.29505628]\n [ 0.20396819  0.12694972  0.39873125  0.23111548  0.4389678   0.22009322\n   0.28355748  0.          0.52838874  0.45931808]\n [ 0.49403828  0.40838931  0.35803778  0.71041536  0.66555836  0.45206176\n   0.41732383  0.52838874  0.          0.13434081]\n [ 0.47789028  0.3552207   0.40680714  0.66699303  0.68753287  0.44159873\n   0.29505628  0.45931808  0.13434081  0.        ]]\n"
      }
     ],
     "prompt_number": 21
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": "28) Generate a generic 2D Gaussian-like array"
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "X,Y = np.meshgrid(np.linspace(-1,1,100), np.linspace(-1,1,100))\nD = np.sqrt(X*X+Y*Y)\nsigma,mu = 1.0,0.0\nG = np.exp(-((D-mu)**2/(2.0*sigma**2)))\nprint(G)",
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "[[ 0.36787944  0.37531033  0.38273509 ...,  0.38273509  0.37531033\n   0.36787944]\n [ 0.37531033  0.38289132  0.39046605 ...,  0.39046605  0.38289132\n   0.37531033]\n [ 0.38273509  0.39046605  0.39819064 ...,  0.39819064  0.39046605\n   0.38273509]\n ..., \n [ 0.38273509  0.39046605  0.39819064 ...,  0.39819064  0.39046605\n   0.38273509]\n [ 0.37531033  0.38289132  0.39046605 ...,  0.39046605  0.38289132\n   0.37531033]\n [ 0.36787944  0.37531033  0.38273509 ...,  0.38273509  0.37531033\n   0.36787944]]\n"
      }
     ],
     "prompt_number": 22
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": "29) Consider the vector [1, 2, 3, 4, 5], how to build a new vector with 3 consecutive zeros interleaved between each value"
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "# Author: Warren Weckesser\nZ = np.array([1,2,3,4,5])\nnz = 3\nZ0 = np.zeros(len(Z)+(len(Z)-1)*(nz))\nZ0[::nz+1] = Z\nprint(Z0)",
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "[ 1.  0.  0.  0.  2.  0.  0.  0.  3.  0.  0.  0.  4.  0.  0.  0.  5.]\n"
      }
     ],
     "prompt_number": 23
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": "30) Find the nearest value from a given value in an array"
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "Z = np.random.random((5,5,5))\nz = 0.3\nprint(Z.flat[np.abs(Z-z).argmin()])\n",
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "0.299674478892\n"
      }
     ],
     "prompt_number": 27
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": "## Journeyman"
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": "31) Consider the following file:\n\n    1,2,3,4,5  \n    6,,,7,8  \n    ,,9,10,11\nHow to read it?  \n\n    Z = genfromtxt(\"missing.dat\",delimiter=\",\")"
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": "32) Consider a generator function that generates 10 integers and use it to build an array"
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "def generate():\n    for x in range(10):\n        yield x\nZ = np.fromiter(generate(), dtype=float, count=-1)\nprint(Z)",
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "[ 0.  1.  2.  3.  4.  5.  6.  7.  8.  9.]\n"
      }
     ],
     "prompt_number": 30
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": "33) Consider a given vector, how to add 1 to each element indexed by a second vector (be careful with repeated indices)?"
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "# Author: Brett Olsen\nZ = np.ones(10)\nI = np.random.randint(0,len(Z),20)\nZ += np.bincount(I,minlength=len(Z))\nprint(Z)",
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "[ 2.  4.  4.  1.  5.  4.  4.  2.  2.  2.]\n"
      }
     ],
     "prompt_number": 31
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": "34) How to accumulate elements of a vector (X) to an array (F) based on an index list (I)?"
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "# Author: Alan G Isaac\nX = [1,2,3,4,5,6]\nI = [1,3,9,3,4,1]\nF = np.bincount(I,X)\nprint(F)",
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "[ 0.  7.  0.  6.  5.  0.  0.  0.  0.  3.]\n"
      }
     ],
     "prompt_number": 32
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": "35) Considering a (w,h,3) image of (dtype=ubyte), compute the number of unique colors"
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "# Author: Nadav Horesh\nw,h = 16,16\nI = np.random.randint(0,2,(h,w,3)).astype(np.ubyte)\nF = I[...,0]*256*256+I[...,1]*256+I[...,2]\nn = len(np.unique(F))\nprint(n)",
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "4\n"
      }
     ],
     "prompt_number": 34
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": "36) Considering a four dimensions array, how to get sum over the last two axis at once?"
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "A = np.random.randint(0,10,(3,4,3,4))\nsum = A.reshape(A.shape[:-2]+(-1,)).sum(axis=-1)\nprint(sum)",
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "[[45 49 48 62]\n [33 56 42 63]\n [59 44 35 67]]\n"
      }
     ],
     "prompt_number": 35
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": "## Craftsman"
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": "36) Consider a one-dimensional array Z, build a two-dimensional array whose first row is (Z[0],Z[1],Z[2]) and each subsequent row is shifted by 1 (last row should be (Z[-3],Z[-2],Z[-1])"
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "# Author: Joe Kington / Erik Rigtorp\ndef rolling(a,window):\n    shape = (a.size-window+1,window)\n    strides = (a.itemsize,a.itemsize)\n    return np.lib.stride_tricks.as_strided(a,shape=shape,strides=strides)\n\nZ = rolling(np.arange(100),3)\nprint(Z)",
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "[[ 0  1  2]\n [ 1  2  3]\n [ 2  3  4]\n [ 3  4  5]\n [ 4  5  6]\n [ 5  6  7]\n [ 6  7  8]\n [ 7  8  9]\n [ 8  9 10]\n [ 9 10 11]\n [10 11 12]\n [11 12 13]\n [12 13 14]\n [13 14 15]\n [14 15 16]\n [15 16 17]\n [16 17 18]\n [17 18 19]\n [18 19 20]\n [19 20 21]\n [20 21 22]\n [21 22 23]\n [22 23 24]\n [23 24 25]\n [24 25 26]\n [25 26 27]\n [26 27 28]\n [27 28 29]\n [28 29 30]\n [29 30 31]\n [30 31 32]\n [31 32 33]\n [32 33 34]\n [33 34 35]\n [34 35 36]\n [35 36 37]\n [36 37 38]\n [37 38 39]\n [38 39 40]\n [39 40 41]\n [40 41 42]\n [41 42 43]\n [42 43 44]\n [43 44 45]\n [44 45 46]\n [45 46 47]\n [46 47 48]\n [47 48 49]\n [48 49 50]\n [49 50 51]\n [50 51 52]\n [51 52 53]\n [52 53 54]\n [53 54 55]\n [54 55 56]\n [55 56 57]\n [56 57 58]\n [57 58 59]\n [58 59 60]\n [59 60 61]\n [60 61 62]\n [61 62 63]\n [62 63 64]\n [63 64 65]\n [64 65 66]\n [65 66 67]\n [66 67 68]\n [67 68 69]\n [68 69 70]\n [69 70 71]\n [70 71 72]\n [71 72 73]\n [72 73 74]\n [73 74 75]\n [74 75 76]\n [75 76 77]\n [76 77 78]\n [77 78 79]\n [78 79 80]\n [79 80 81]\n [80 81 82]\n [81 82 83]\n [82 83 84]\n [83 84 85]\n [84 85 86]\n [85 86 87]\n [86 87 88]\n [87 88 89]\n [88 89 90]\n [89 90 91]\n [90 91 92]\n [91 92 93]\n [92 93 94]\n [93 94 95]\n [94 95 96]\n [95 96 97]\n [96 97 98]\n [97 98 99]]\n"
      }
     ],
     "prompt_number": 37
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": "37) Consider a set of 100 triplets describing 100 triangles (with shared vertices), find the set of unique line segments composing all the triangles."
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "faces = np.random.randint(0,100,(100,3))\nF = np.roll(faces.repeat(2,axis=1),-1,axis=1)\nF = F.reshape(len(F)*3,2)\nF = np.sort(F,axis=1)\nG = F.view(dtype=[('p0',F.dtype),('p1',F.dtype)])\nG = np.unique(G)\nprint(G)",
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "[(0, 31) (0, 35) (1, 44) (1, 96) (2, 7) (2, 8) (2, 17) (2, 27) (2, 34)\n (2, 45) (2, 47) (2, 53) (2, 79) (2, 83) (2, 93) (2, 99) (3, 43) (3, 92)\n (4, 8) (4, 12) (4, 17) (4, 20) (4, 34) (4, 39) (4, 48) (4, 50) (5, 12)\n (5, 32) (5, 55) (5, 58) (5, 94) (5, 99) (6, 27) (6, 30) (6, 37) (6, 40)\n (6, 63) (7, 9) (7, 14) (7, 19) (7, 21) (7, 93) (8, 16) (8, 26) (8, 27)\n (8, 37) (8, 39) (8, 42) (8, 43) (8, 50) (8, 92) (8, 96) (9, 21) (9, 45)\n (9, 86) (10, 16) (10, 18) (10, 26) (10, 31) (10, 38) (10, 46) (10, 49)\n (10, 54) (10, 71) (10, 82) (10, 87) (11, 36) (11, 70) (12, 17) (12, 39)\n (12, 58) (14, 19) (14, 20) (14, 32) (14, 51) (14, 74) (14, 79) (14, 92)\n (14, 97) (15, 25) (15, 46) (15, 74) (15, 82) (16, 24) (16, 26) (16, 49)\n (16, 53) (16, 56) (16, 92) (17, 39) (17, 58) (17, 70) (17, 83) (18, 31)\n (19, 33) (19, 67) (20, 34) (20, 47) (20, 61) (20, 69) (20, 72) (20, 92)\n (21, 31) (21, 40) (21, 53) (21, 80) (21, 92) (22, 33) (22, 82) (23, 26)\n (23, 60) (24, 38) (24, 47) (24, 56) (25, 32) (25, 34) (25, 46) (25, 56)\n (25, 81) (26, 37) (26, 58) (26, 60) (26, 61) (26, 62) (26, 65) (26, 68)\n (26, 98) (27, 34) (27, 40) (27, 41) (27, 42) (27, 58) (27, 59) (27, 64)\n (27, 93) (28, 42) (28, 50) (28, 65) (28, 72) (29, 38) (29, 63) (29, 71)\n (29, 82) (29, 83) (29, 86) (30, 37) (30, 44) (30, 82) (30, 86) (31, 35)\n (31, 40) (31, 92) (32, 51) (32, 56) (32, 74) (32, 99) (33, 42) (33, 49)\n (33, 67) (33, 73) (33, 81) (33, 82) (33, 89) (33, 93) (34, 51) (34, 58)\n (34, 70) (34, 79) (34, 81) (36, 37) (36, 58) (36, 70) (36, 77) (36, 84)\n (36, 93) (36, 96) (37, 46) (37, 56) (37, 58) (37, 63) (37, 86) (37, 91)\n (37, 93) (38, 44) (38, 47) (38, 54) (38, 76) (38, 82) (39, 48) (39, 60)\n (39, 75) (39, 96) (40, 62) (40, 98) (41, 41) (41, 59) (41, 65) (41, 71)\n (41, 77) (41, 87) (41, 89) (41, 93) (42, 43) (42, 50) (42, 64) (42, 93)\n (43, 47) (43, 75) (43, 92) (44, 48) (44, 61) (44, 76) (44, 77) (44, 82)\n (44, 96) (45, 47) (45, 86) (46, 58) (46, 64) (46, 71) (46, 81) (47, 61)\n (47, 75) (48, 77) (48, 99) (49, 53) (49, 55) (49, 73) (49, 82) (49, 96)\n (50, 80) (50, 93) (51, 56) (51, 60) (51, 70) (51, 71) (51, 95) (53, 80)\n (53, 99) (55, 94) (55, 96) (56, 60) (56, 91) (58, 70) (58, 77) (58, 98)\n (60, 75) (61, 65) (61, 96) (62, 68) (62, 88) (62, 92) (62, 98) (63, 86)\n (64, 81) (64, 83) (64, 86) (65, 67) (65, 72) (65, 89) (65, 91) (66, 78)\n (66, 86) (66, 89) (66, 94) (67, 74) (67, 90) (67, 91) (68, 86) (68, 99)\n (69, 72) (71, 83) (71, 87) (71, 95) (72, 74) (72, 99) (74, 82) (74, 90)\n (74, 99) (77, 99) (78, 89) (79, 97) (80, 93) (81, 89) (83, 86) (84, 96)\n (86, 94) (86, 99) (88, 92)]\n"
      }
     ],
     "prompt_number": 38
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": "## Artisan"
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": "38) Convert a vector of ints into a matrix binary representation."
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "# Author: Robert Kern\nZ = np.random.randint(0,5,(100,3))\nE = np.logical_and.reduce(Z[:,1:]==Z[:,:-1],axis=1)\nU = Z[~E]\nprint(U)",
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "[[4 4 2]\n [0 3 1]\n [0 4 1]\n [4 2 4]\n [2 1 3]\n [0 1 3]\n [0 2 3]\n [3 0 4]\n [2 0 4]\n [0 0 4]\n [2 2 1]\n [2 1 4]\n [3 4 4]\n [2 0 3]\n [2 2 1]\n [3 2 4]\n [1 2 0]\n [2 3 4]\n [3 3 4]\n [3 3 1]\n [4 4 3]\n [1 3 0]\n [3 0 4]\n [3 4 0]\n [0 0 1]\n [2 3 3]\n [1 1 4]\n [4 3 0]\n [2 0 3]\n [4 3 0]\n [3 3 4]\n [3 2 1]\n [2 0 3]\n [4 0 1]\n [1 1 0]\n [1 4 1]\n [1 4 4]\n [1 4 3]\n [0 3 3]\n [4 4 3]\n [4 4 1]\n [2 3 2]\n [3 4 1]\n [0 4 2]\n [4 1 2]\n [0 2 3]\n [4 0 3]\n [2 3 0]\n [0 0 4]\n [4 3 0]\n [1 3 0]\n [0 1 2]\n [1 3 3]\n [4 4 2]\n [0 4 4]\n [2 0 2]\n [1 3 4]\n [0 2 3]\n [4 0 3]\n [1 4 4]\n [2 0 3]\n [3 2 0]\n [4 0 4]\n [4 3 1]\n [0 4 3]\n [1 1 3]\n [2 3 2]\n [4 3 1]\n [0 4 0]\n [4 1 3]\n [1 3 0]\n [1 3 1]\n [3 0 0]\n [1 0 0]\n [2 2 1]\n [2 1 4]\n [2 4 4]\n [4 3 4]\n [3 2 4]\n [4 2 4]\n [0 1 1]\n [4 0 2]\n [0 1 3]\n [0 4 4]\n [2 3 3]\n [4 3 3]\n [0 0 2]\n [1 0 4]\n [3 2 0]\n [1 0 1]\n [4 2 1]\n [4 2 3]\n [2 0 3]\n [1 4 4]\n [2 3 1]]\n"
      }
     ],
     "prompt_number": 39
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": "39) Convert a vector of ints into a matrix binary representation."
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "# Author: Warren Weckesser\nI = np.array([0,1,2,3,15,16,32,64,128])\nB = ((I.reshape(-1,1)&(2**np.arange(8)))!=0).astype(int)\nB = B[:,::-1]\nprint(B)",
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "[[0 0 0 0 0 0 0 0]\n [0 0 0 0 0 0 0 1]\n [0 0 0 0 0 0 1 0]\n [0 0 0 0 0 0 1 1]\n [0 0 0 0 1 1 1 1]\n [0 0 0 1 0 0 0 0]\n [0 0 1 0 0 0 0 0]\n [0 1 0 0 0 0 0 0]\n [1 0 0 0 0 0 0 0]]\n"
      }
     ],
     "prompt_number": 41
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": "## Adept"
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": "40) Consider an arbitrary array, write a function that extract a subpart with a fixed shape and centered on a given element (pad with a fill value when necessary)"
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "# Author: Nicolas Rougier\nZ = np.random.random((25,25))\nshape = (3,3)\nfill = 0\nposition = (0,0)\n\nR = np.ones(shape,dtype=Z.dtype)*fill\nP = np.array(list(position)).astype(int)\nRs = np.array(list(R.shape)).astype(int)\nZs = np.array(list(Z.shape)).astype(int)\n\nR_start = np.zeros((len(shape),)).astype(int)\nR_stop = np.array(list(shape)).astype(int)\nZ_start = (P-Rs//2)\nZ_stop = (P+Rs//2) + Rs%2\n\nR_start = (R_start-np.minimum(Z_start,0)).tolist()\nZ_start = (np.maximum(Z_start,0)).tolist()\nR_stop = np.maximum(R_start,(R_stop-np.maximum(Z_stop-Zs,0))).tolist()\nZ_stop = (np.minimum(Z_stop,Zs)).tolist()\n\nr = [slice(start,stop)for start,stop in zip(R_start,R_stop)]\nz = [slice(start,stop) for start,stop in zip(Z_start,Z_stop)]\nR[r] = Z[z]\n\nprint(R)",
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "[[ 0.          0.          0.        ]\n [ 0.          0.62124464  0.91835812]\n [ 0.          0.59830839  0.00799669]]\n"
      }
     ],
     "prompt_number": 43
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": "## Expert"
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": "41) Consider two arrays A and B of shape (8,3) and (2,2). How to find rows of A that contain elements of each row of B regardless of the order of the elements in B?"
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "# Author: Gabe Schwartz\nA = np.random.randint(0,5,(8,3))\nB = np.random.randint(0,5,(2,2))\nC = (A[...,np.newaxis,np.newaxis]==B)\nrows = (C.sum(axis=(1,2,3))>=B.shape[1]).nonzero()[0]\n\nprint(rows)",
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "[0 2 3 4 5 7]\n"
      }
     ],
     "prompt_number": 44
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": "42) Extract all the contiguous 3x3 blocks from a random 10x10 matrix."
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "Z = np.random.randint(0,5,(10,10))\nn = 3\ni = 1+(Z.shape[0]-3)\nj = 1+(Z.shape[1]-3)\nC = np.lib.stride_tricks.as_strided(Z,shape=(i,j,n,n),strides=Z.strides+Z.strides)\n\nprint(C)",
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "[[[[2 3 2]\n   [0 2 3]\n   [2 0 3]]\n\n  [[3 2 3]\n   [2 3 0]\n   [0 3 4]]\n\n  [[2 3 4]\n   [3 0 0]\n   [3 4 0]]\n\n  [[3 4 2]\n   [0 0 1]\n   [4 0 2]]\n\n  [[4 2 4]\n   [0 1 1]\n   [0 2 3]]\n\n  [[2 4 2]\n   [1 1 0]\n   [2 3 0]]\n\n  [[4 2 4]\n   [1 0 1]\n   [3 0 2]]\n\n  [[2 4 3]\n   [0 1 2]\n   [0 2 1]]]\n\n\n [[[0 2 3]\n   [2 0 3]\n   [2 1 4]]\n\n  [[2 3 0]\n   [0 3 4]\n   [1 4 2]]\n\n  [[3 0 0]\n   [3 4 0]\n   [4 2 1]]\n\n  [[0 0 1]\n   [4 0 2]\n   [2 1 0]]\n\n  [[0 1 1]\n   [0 2 3]\n   [1 0 1]]\n\n  [[1 1 0]\n   [2 3 0]\n   [0 1 1]]\n\n  [[1 0 1]\n   [3 0 2]\n   [1 1 0]]\n\n  [[0 1 2]\n   [0 2 1]\n   [1 0 1]]]\n\n\n [[[2 0 3]\n   [2 1 4]\n   [1 1 3]]\n\n  [[0 3 4]\n   [1 4 2]\n   [1 3 4]]\n\n  [[3 4 0]\n   [4 2 1]\n   [3 4 3]]\n\n  [[4 0 2]\n   [2 1 0]\n   [4 3 4]]\n\n  [[0 2 3]\n   [1 0 1]\n   [3 4 3]]\n\n  [[2 3 0]\n   [0 1 1]\n   [4 3 2]]\n\n  [[3 0 2]\n   [1 1 0]\n   [3 2 4]]\n\n  [[0 2 1]\n   [1 0 1]\n   [2 4 1]]]\n\n\n [[[2 1 4]\n   [1 1 3]\n   [1 3 1]]\n\n  [[1 4 2]\n   [1 3 4]\n   [3 1 4]]\n\n  [[4 2 1]\n   [3 4 3]\n   [1 4 2]]\n\n  [[2 1 0]\n   [4 3 4]\n   [4 2 1]]\n\n  [[1 0 1]\n   [3 4 3]\n   [2 1 2]]\n\n  [[0 1 1]\n   [4 3 2]\n   [1 2 3]]\n\n  [[1 1 0]\n   [3 2 4]\n   [2 3 3]]\n\n  [[1 0 1]\n   [2 4 1]\n   [3 3 1]]]\n\n\n [[[1 1 3]\n   [1 3 1]\n   [0 0 1]]\n\n  [[1 3 4]\n   [3 1 4]\n   [0 1 0]]\n\n  [[3 4 3]\n   [1 4 2]\n   [1 0 4]]\n\n  [[4 3 4]\n   [4 2 1]\n   [0 4 0]]\n\n  [[3 4 3]\n   [2 1 2]\n   [4 0 0]]\n\n  [[4 3 2]\n   [1 2 3]\n   [0 0 2]]\n\n  [[3 2 4]\n   [2 3 3]\n   [0 2 0]]\n\n  [[2 4 1]\n   [3 3 1]\n   [2 0 2]]]\n\n\n [[[1 3 1]\n   [0 0 1]\n   [0 0 4]]\n\n  [[3 1 4]\n   [0 1 0]\n   [0 4 1]]\n\n  [[1 4 2]\n   [1 0 4]\n   [4 1 3]]\n\n  [[4 2 1]\n   [0 4 0]\n   [1 3 4]]\n\n  [[2 1 2]\n   [4 0 0]\n   [3 4 4]]\n\n  [[1 2 3]\n   [0 0 2]\n   [4 4 2]]\n\n  [[2 3 3]\n   [0 2 0]\n   [4 2 3]]\n\n  [[3 3 1]\n   [2 0 2]\n   [2 3 1]]]\n\n\n [[[0 0 1]\n   [0 0 4]\n   [3 0 3]]\n\n  [[0 1 0]\n   [0 4 1]\n   [0 3 4]]\n\n  [[1 0 4]\n   [4 1 3]\n   [3 4 2]]\n\n  [[0 4 0]\n   [1 3 4]\n   [4 2 2]]\n\n  [[4 0 0]\n   [3 4 4]\n   [2 2 2]]\n\n  [[0 0 2]\n   [4 4 2]\n   [2 2 2]]\n\n  [[0 2 0]\n   [4 2 3]\n   [2 2 3]]\n\n  [[2 0 2]\n   [2 3 1]\n   [2 3 0]]]\n\n\n [[[0 0 4]\n   [3 0 3]\n   [3 4 4]]\n\n  [[0 4 1]\n   [0 3 4]\n   [4 4 4]]\n\n  [[4 1 3]\n   [3 4 2]\n   [4 4 3]]\n\n  [[1 3 4]\n   [4 2 2]\n   [4 3 3]]\n\n  [[3 4 4]\n   [2 2 2]\n   [3 3 1]]\n\n  [[4 4 2]\n   [2 2 2]\n   [3 1 3]]\n\n  [[4 2 3]\n   [2 2 3]\n   [1 3 3]]\n\n  [[2 3 1]\n   [2 3 0]\n   [3 3 3]]]]\n"
      }
     ],
     "prompt_number": 47
    }
   ],
   "metadata": {}
  }
 ]
}